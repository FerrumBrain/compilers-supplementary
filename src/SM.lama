-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> x
    esac
  }

  case i of
    READ             -> "READ"
  | WRITE            -> "WRITE"
  | BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];

  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});

  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, v) {
    case loc of
      Arg (i) -> args[i] := v
    | Loc (i) -> locs[i] := v
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then v else g (y) fi}
    esac;
    [args, locs]
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  (* Assignment *)
  fun eval (c@[stack, cst, state, world], insns) {
    fun createLocal(stack, na, nl) {
      case take(stack, na) of
        [stack, args] -> 
          case foldl(fun ([state, n], arg) {[assign(state, Arg (n), arg), n + 1]}, [makeState(na, nl), 0], args) of
            [state, _] -> [stack, state]
          esac
      esac
    }
    
    case insns of
      {} -> c
    | i : is -> case i of
        READ -> case world.readWorld of 
          [n, newWorld] -> eval ([n : stack, cst, state, newWorld], is) 
        esac
      | WRITE -> case stack of 
          (s : ss) -> eval ([ss, cst, state, writeWorld (s, world)], is)
        esac
      | BINOP (op) -> case stack of 
          (s : f : ss) -> case op of
              "+" -> eval ([(f + s) : ss, cst, state, world], is)
            | "-" -> eval ([(f - s) : ss, cst, state, world], is)
            | "*" -> eval ([(f * s) : ss, cst, state, world], is)
            | "/" -> eval ([(f / s) : ss, cst, state, world], is)
            | "%" -> eval ([(f % s) : ss, cst, state, world], is)
            | "!!" -> eval ([(f !! s) : ss, cst, state, world], is)
            | "&&" -> eval ([(f && s) : ss, cst, state, world], is)
            | "<" -> eval ([(f < s) : ss, cst, state, world], is)
            | "<=" -> eval ([(f <= s) : ss, cst, state, world], is)
            | "==" -> eval ([(f == s) : ss, cst, state, world], is)
            | ">=" -> eval ([(f >= s) : ss, cst, state, world], is)
            | ">" -> eval ([(f > s) : ss, cst, state, world], is)
            | "!=" -> eval ([(f != s) : ss, cst, state, world], is)
            esac
        esac
      | LD (x) -> eval ([lookup(state, x) : stack, cst, state, world], is)
      | ST (x) -> case stack of 
          (s : ss) -> eval ([ss, cst, assign(state, x, s), world], is) 
        esac
      | CONST (n) -> eval ([n : stack, cst, state, world], is)
      | LABEL (l) -> eval(c, is)
      | JMP (l) -> eval(c, fromLabel(env, l))
      | CJMP (cond, l) -> case stack of 
          h:stack -> case h of 
              0 -> case cond of 
                     "nz" -> eval([stack, cst, state, world], is)
                   | "z" -> eval([stack, cst, state, world], fromLabel(env, l))
                   esac
            | _ -> case cond of 
                     "nz" -> eval([stack, cst, state, world], fromLabel(env, l))
                   | "z" -> eval([stack, cst, state, world], is)
                   esac
            esac
        esac
    | LDA (x) -> eval([Ref(x) : stack, cst, state, world], is)
    | STI -> case stack of 
        (y : Ref(x) : stack) -> eval([y : stack, cst, assign(state, x, y), world], is)
      esac
    | DROP -> case stack of
        (_: stack) -> eval([stack, cst, state, world], is)
      | [] -> eval([[], cst, state, world], is)
      esac
    | CALL (l, _) -> eval([stack, [state, is] : cst, state, world], fromLabel(env, l))
    | BEGIN (_, na, nl) -> case createLocal(stack, na, nl) of
        [stack, state] -> eval([stack, cst, state, world], is)
      esac
    | END -> case cst of
        [state, is] : cst -> eval([stack, cst, state, world], is)
      | {} -> c
      esac
    | GLOBAL (x) -> eval([stack, cst, assign(state, Glb (x), 0), world], is)
    esac
  esac
  }
  (* End *)

  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar (name) {
    if scopeDepth == 1
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }

  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 1, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, {})]
  }

  -- Lookups a name of a variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Fun (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if scopeDepth == 1
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 1
  }

  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun beginFun (env, state) {
  env [6] (state)
}

fun getFuns (env) {
  env [7] ()
}

fun lookupVar (env, name) {
  env [8] (name)
}

fun lookupFun (env, name) {
  env [9] (name)
}

fun getLocals (env) {
  env [10] ()
}

fun genFunLabel (env, name) {
  env [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [13] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.

(* Assignment *)

-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for code generation:
--    a. generate the code for the topmost expression (the program itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  fun addDefs(env, defs) {
    fun addDef([env, funs, globalDefs], def) {
      case def of
        Var (x) -> if isGlobal(env) then [addVars(env, x), funs, foldl(fun (globalDefs, def) {globalDefs <+ GLOBAL(def)}, globalDefs, x)] else [addVars(env, x), funs, globalDefs] fi
      | Fun (name, args, body) -> case genFunLabel(env, name) of
          [l, env] -> [addFun(env, name, l, args.size), [l, args, body] : funs, globalDefs]
        esac                                     
      esac
    }

    foldl(addDef, [beginScope(env), {}, emptyBuffer()], defs)
  }


  fun rememberFuns(env, funs) {
    foldl(fun (env, [l, args, body]) {
      rememberFun(env, l, args, body)
    }, env, funs)
  }

  fun compileArgs(env, args) {
    fun compileArg([env, code], arg) {
      case genLabel(env) of
        [l, env] -> case compile(l, env, arg) of
          [used, env, argCode] -> [env, code <+> argCode <+> label(l, used)]
        esac
      esac
    }

    foldl (compileArg, [env, emptyBuffer()], args)
  }


  fun compile (lab, env, stmt) {
    case stmt of
      Skip              -> [false, env, emptyBuffer ()]
    | Var    (x)        -> [false, env, singletonBuffer (LD (lookupVar(env, x)))]
    | Ref    (x)        -> [false, env, singletonBuffer (LDA (lookupVar(env, x)))]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
    | Read (x) -> [false, env, singletonBuffer (READ) <+ ST (lookupVar(env, x))]
    | Write (e) -> case genLabel(env) of
        [l, env] -> case compile(l, env, e) of
          [used, env, code] -> [false, env, code <+> label(l, used) <+ WRITE]
        esac
      esac
    | Assn (x, e) -> case genLabels(env, 2) of
        [l1, l2, env] -> case compile(l1, env, x) of
          [usedL1, env, codeX] -> case compile(l2, env, e) of 
            [usedL2, env, codeE] -> [false, env, codeX <+> label(l1, usedL1) <+> codeE <+> label(l2, usedL2) <+ STI]
          esac
        esac
      esac
    | Seq   (s1, s2) ->
        case env.genLabel of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
             esac
        esac
    | If (e, s1, s2) -> 
        case env.genLabel of 
          [s2Lab, env] -> 
            case compile(lab, env, s1) of
              [_, env, s1Code] -> 
                case compile(lab, env, s2) of
                  [_, env, s2Code] -> case genLabel(env) of
                    [l, env] -> case compile(l, env, e) of
                      [used, env, code] -> [true, env, code <+> label(l, used) <+ CJMP("z", s2Lab) <+> s1Code <+ JMP(lab) <+> label(s2Lab, true) <+> s2Code]
                    esac
                  esac
                esac
            esac
        esac
    | While (e, s) -> 
        case env.genLabels(2) of
          [lab1, lab2, env] -> 
            case compile(lab2, env, s) of 
              [lab2Used, env, sCode] -> case genLabel(env) of
                [l, env] -> case compile(l, env, e) of
                  [used, env, code] -> [true, env, label(lab1, true) <+> code <+> label(l, used) <+ CJMP("z", lab) <+> sCode <+> label(lab2, lab2Used) <+ JMP(lab1)]
              esac
            esac
          esac
        esac
    | DoWhile (s, e) -> 
        case env.genLabels(2) of
          [lab1, lab2, env] -> case compile(lab2, env, s) of
            [lab2Used, env, sCode] -> case genLabel(env) of
              [l, env] -> case compile(l, env, e) of
                [used, env, code] -> [false, env, label(lab1, true) <+> sCode <+> label(lab2, lab2Used) <+> code <+> label(l, used) <+ CJMP("nz", lab1)]
              esac
            esac
          esac
        esac
    | Ignore (e) -> case genLabel(env) of 
        [lab1, env] -> case compile(lab1, env, e) of
          [used, env, code] -> [false, env, code <+> label(lab1, used) <+ DROP]
        esac
      esac
    | Binop(op, l, r) -> case env.genLabels(2) of
        [lab1, lab2, env] -> case compile(lab1, env, l) of 
          [lUsed, env, lCode] -> case compile(lab2, env, r) of 
            [rUsed, env, rCode] -> [false, env, lCode <+> label(lab1, lUsed) <+> rCode <+> label(lab2, rUsed) <+ BINOP(op)]
          esac          
        esac
      esac
    | Scope (defs, body) -> case addDefs(env, defs) of
        [env, funs, globalDefsCode] -> case compile(lab, rememberFuns(env, funs), body) of 
          [used, env, code] -> [used, endScope(env), globalDefsCode <+> code]
        esac
      esac
    | Call (name, args) -> case compileArgs(env, args) of
        [env, argsCode] -> case lookupFun(env, name) of
          Fun(l, nArgs) -> [false, env, argsCode <+ CALL(l, nArgs)]
        esac
      esac
    | _ -> failure ("compileSM not implemented\n")
    esac
  }

  fun compileFun([env, code], Fun (fLab, args, body, state)) {
    case genLabel(addArgs(beginFun(env, state), args)) of
      [l, env] -> case compile(l, env, body) of
        [used, env, funCode] -> [env, code <+ LABEL(fLab) <+ BEGIN (fLab, size(args), getLocals(env)) <+> funCode <+> label(l, used) <+ END]
      esac
    esac
  }

  fun compileFuns(env) {
    case getFuns(env) of
      [{}, _] -> emptyBuffer()
    | [fs, env] -> case foldl (compileFun, [env, emptyBuffer()], fs) of 
        [env, fsCode] -> fsCode <+> compileFuns(env)
      esac
    esac 
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, env, code] -> getBuffer $ singletonBuffer(LABEL("main")) <+ BEGIN ("main", 0, getLocals(env)) <+> code <+> label (endLab, endLabUsed) <+ END <+> compileFuns(env)
       esac
  esac
}

