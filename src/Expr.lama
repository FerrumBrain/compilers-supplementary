-- Expression evaluator

import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Fun;
import Builtins;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Set     (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        if      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)               |
--        String  (string)             |
--        Array   (expr list)          |
--        Sexp    (string, expr list)  |
--        Elem    (expr, expr)         |
--        ElemRef (expr, expr)         |
--        Builtin (string, expr list)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun lookupVal (state, name) {
  case state.lookup (name) of
    x@Val (_) -> x
  | _         -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun lookupFun (state, name) {
  case state.lookup (name) of
    x@Fun (_, _) -> x
  | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Val (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun addNamesFunc (s, names, values) {
  case names of
    (name: names) -> case values of
      (value: values) -> addNamesFunc(addName(s, name, value), names, values)
    | _ -> s
    esac
  | _ -> s
  esac
}

fun addNamesScope (s, defs) {
  case defs of
    (d: defs) -> case d of
        Var (x) -> addNamesScope(addNames(s, x), defs)
      | Fun (name, args, body) -> addNamesScope(addFunction(s, name, args, body), defs)
      esac
    | _ -> s
  esac
}

fun eval (c@[s, w], expr) {
  case expr of
    Assn (l, r) -> case eval(c, r) of 
      [c@[s, w], v] -> case eval(c, l) of
        [[s, w], ElemRef (arr, i)] -> arr[i] := v; [[s, w], v]
      | [c@[s, w], refX] -> [[s <- [refX, v], w], v]
      esac
    esac
  | Seq (s1, s2) -> case eval(c, s1) of 
      [c@[s, w], _] -> eval (c, s2)
      esac
  | Skip -> [c, None]
  | Read (x) -> case readWorld(w) of
      [z, w] -> [[s <- [x, z], w], None]
    esac
  | Write (e) -> case eval(c, e) of 
      [c@[s, w], res] -> [[s, writeWorld(res, w)], None]
    esac
  | If (cond, s1, s2) -> case eval(c, cond) of
      [c, res] -> if res then eval(c, s1) else eval(c, s2) fi
    esac
  | While (cond, s) -> case eval(c, cond) of 
      [c, res] -> if res then eval(c, Seq(s, expr)) else [c, None] fi 
    esac
  | DoWhile (s, cond) -> case eval(c, s) of
      [c, _] -> eval(c, While(cond, s))
    esac
  | Var (x) -> [c, lookup(s, x)]
  | Ref (x) -> [c, x]
  | Const (n) -> [c, n]
  | Binop (op, l, r) -> case eval(c, l) of 
      [c@[s, w], lRes] -> case eval(c, r) of
        [c@[s, w], rRes] -> [c, evalOp(op, lRes, rRes)]
      esac
    esac
  | Ignore (e) -> case eval(c, e) of 
      [c, _] -> [c, None]
    esac
  | Call (f, args) -> case evalList(c, args) of
      [[s, w], vals] -> case lookup(s, f) of
        Fun (args, External) -> case evalBuiltin(f, vals, w) of
          [res, newWorld] -> [[s, newWorld], res]
        esac
      | Fun (args, body) -> case enterFunction(s) of
          sFun -> case addNamesFunc(sFun, args, vals) of
            s1 -> case eval([s1, w], body) of
              [[s2, w2], res] -> [[leaveFunction(s, getGlobal(s2)), w2], res]
            esac
          esac
        esac
      esac
    esac
  | Scope (defs, expr) -> case enterScope(s) of
      s1 -> case addNamesScope(s1, defs) of
        s2 -> case eval([s2, w], expr) of
          [[s3, w1], res] -> [[leaveScope(s3), w1], res]
          esac
      esac
    esac
  | String (s) -> [c, s]
  | Array (exprList) -> case evalList(c, exprList) of
      [c, vals] -> [c, listArray(vals)]
    esac
  | Sexp (tag, exprList) -> case evalList(c, exprList) of
      [c, vals] -> [c, Sexp(tag, listArray(vals))]
    esac
  | Elem (arr, i) -> case eval(c, arr) of
      [c, Sexp(name, args)] -> case eval(c, i) of
        [c, i] -> [c, args[i]]
      esac
    | [c, arr] -> case eval(c, i) of
        [c, i] -> [c, arr[i]]
      esac
    esac
  | ElemRef (arr, i) -> case eval(c, arr) of
      [c, Sexp(name, args)] -> case eval(c, i) of
        [c, i] -> [c, ElemRef (args, i)]
      esac
    | [c, arr] -> case eval(c, i) of
        [c, i] -> [c, ElemRef (arr, i)]
      esac
    esac
  | Set (name, expr) -> case eval(c, expr) of
      [[s, w], value] -> [[s <- [name, value], w], None]
    esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState ().enterScope.addName ("read",   Fun ({}, External))
                                      .addName ("write",  Fun ({"a"}, External))
                                      .addName ("length", Fun ({"a"}, External)), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
