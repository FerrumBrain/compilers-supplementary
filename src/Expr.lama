-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[s, w], expr) {
  case expr of
    Assn (l, r) -> case eval(c, l) of 
      [c@[s, w], refX] -> case eval(c, r) of
        [c@[s, w], v] -> [[s <- [refX, v], w], v]
      esac
    esac
  | Seq (s1, s2) -> case eval(c, s1) of 
      [c@[s, w], _] -> eval (c, s2)
      esac
  | Skip -> [c, None]
  | Read (x) -> case readWorld(w) of
      [z, w] -> [[s <- [x, z], w], None]
    esac
  | Write (e) -> case eval(c, e) of 
      [c@[s, w], res] -> [[s, writeWorld(res, w)], None]
    esac
  | If (cond, s1, s2) -> case eval(c, cond) of
      [c, res] -> if res then eval(c, s1) else eval(c, s2) fi
    esac
  | While (cond, s) -> case eval(c, cond) of 
      [c, res] -> if res then eval(c, Seq(s, expr)) else [c, None] fi 
    esac
  | DoWhile (s, cond) -> case eval(c, s) of
      [c, _] -> eval(c, While(cond, s))
    esac
  | Var (x) -> [c, s(x)]
  | Ref (x) -> [c, x]
  | Const (n) -> [c, n]
  | Binop (op, l, r) -> case eval(c, l) of 
      [c@[s, w], lRes] -> case eval(c, r) of
        [c@[s, w], rRes] -> [c, evalOp(op, lRes, rRes)]
      esac
    esac
  | Ignore (e) -> case eval(c, e) of 
      [c, _] -> [c, None]
    esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
